// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.1
// source: staedte.proto

package stadtservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StadteInformationen_SucheNachAnteilEinerPostleitzahl_FullMethodName = "/stadteInformationen.StadteInformationen/SucheNachAnteilEinerPostleitzahl"
	StadteInformationen_SucheNachAnteilEinesStadtnamen_FullMethodName   = "/stadteInformationen.StadteInformationen/SucheNachAnteilEinesStadtnamen"
	StadteInformationen_SucheNachExakenStadtnamen_FullMethodName        = "/stadteInformationen.StadteInformationen/SucheNachExakenStadtnamen"
	StadteInformationen_SucheNachExtakerPostleitzahl_FullMethodName     = "/stadteInformationen.StadteInformationen/SucheNachExtakerPostleitzahl"
)

// StadteInformationenClient is the client API for StadteInformationen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StadteInformationenClient interface {
	SucheNachAnteilEinerPostleitzahl(ctx context.Context, in *PostleitzahlenSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Postleitzahl], error)
	SucheNachAnteilEinesStadtnamen(ctx context.Context, in *StadtSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Stadtname], error)
	SucheNachExakenStadtnamen(ctx context.Context, in *StadtSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StadtInfo], error)
	SucheNachExtakerPostleitzahl(ctx context.Context, in *Postleitzahl, opts ...grpc.CallOption) (*StadtInfo, error)
}

type stadteInformationenClient struct {
	cc grpc.ClientConnInterface
}

func NewStadteInformationenClient(cc grpc.ClientConnInterface) StadteInformationenClient {
	return &stadteInformationenClient{cc}
}

func (c *stadteInformationenClient) SucheNachAnteilEinerPostleitzahl(ctx context.Context, in *PostleitzahlenSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Postleitzahl], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StadteInformationen_ServiceDesc.Streams[0], StadteInformationen_SucheNachAnteilEinerPostleitzahl_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PostleitzahlenSuchbegriff, Postleitzahl]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachAnteilEinerPostleitzahlClient = grpc.ServerStreamingClient[Postleitzahl]

func (c *stadteInformationenClient) SucheNachAnteilEinesStadtnamen(ctx context.Context, in *StadtSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Stadtname], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StadteInformationen_ServiceDesc.Streams[1], StadteInformationen_SucheNachAnteilEinesStadtnamen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StadtSuchbegriff, Stadtname]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachAnteilEinesStadtnamenClient = grpc.ServerStreamingClient[Stadtname]

func (c *stadteInformationenClient) SucheNachExakenStadtnamen(ctx context.Context, in *StadtSuchbegriff, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StadtInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StadteInformationen_ServiceDesc.Streams[2], StadteInformationen_SucheNachExakenStadtnamen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StadtSuchbegriff, StadtInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachExakenStadtnamenClient = grpc.ServerStreamingClient[StadtInfo]

func (c *stadteInformationenClient) SucheNachExtakerPostleitzahl(ctx context.Context, in *Postleitzahl, opts ...grpc.CallOption) (*StadtInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StadtInfo)
	err := c.cc.Invoke(ctx, StadteInformationen_SucheNachExtakerPostleitzahl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StadteInformationenServer is the server API for StadteInformationen service.
// All implementations must embed UnimplementedStadteInformationenServer
// for forward compatibility.
type StadteInformationenServer interface {
	SucheNachAnteilEinerPostleitzahl(*PostleitzahlenSuchbegriff, grpc.ServerStreamingServer[Postleitzahl]) error
	SucheNachAnteilEinesStadtnamen(*StadtSuchbegriff, grpc.ServerStreamingServer[Stadtname]) error
	SucheNachExakenStadtnamen(*StadtSuchbegriff, grpc.ServerStreamingServer[StadtInfo]) error
	SucheNachExtakerPostleitzahl(context.Context, *Postleitzahl) (*StadtInfo, error)
	mustEmbedUnimplementedStadteInformationenServer()
}

// UnimplementedStadteInformationenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStadteInformationenServer struct{}

func (UnimplementedStadteInformationenServer) SucheNachAnteilEinerPostleitzahl(*PostleitzahlenSuchbegriff, grpc.ServerStreamingServer[Postleitzahl]) error {
	return status.Errorf(codes.Unimplemented, "method SucheNachAnteilEinerPostleitzahl not implemented")
}
func (UnimplementedStadteInformationenServer) SucheNachAnteilEinesStadtnamen(*StadtSuchbegriff, grpc.ServerStreamingServer[Stadtname]) error {
	return status.Errorf(codes.Unimplemented, "method SucheNachAnteilEinesStadtnamen not implemented")
}
func (UnimplementedStadteInformationenServer) SucheNachExakenStadtnamen(*StadtSuchbegriff, grpc.ServerStreamingServer[StadtInfo]) error {
	return status.Errorf(codes.Unimplemented, "method SucheNachExakenStadtnamen not implemented")
}
func (UnimplementedStadteInformationenServer) SucheNachExtakerPostleitzahl(context.Context, *Postleitzahl) (*StadtInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SucheNachExtakerPostleitzahl not implemented")
}
func (UnimplementedStadteInformationenServer) mustEmbedUnimplementedStadteInformationenServer() {}
func (UnimplementedStadteInformationenServer) testEmbeddedByValue()                             {}

// UnsafeStadteInformationenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StadteInformationenServer will
// result in compilation errors.
type UnsafeStadteInformationenServer interface {
	mustEmbedUnimplementedStadteInformationenServer()
}

func RegisterStadteInformationenServer(s grpc.ServiceRegistrar, srv StadteInformationenServer) {
	// If the following call pancis, it indicates UnimplementedStadteInformationenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StadteInformationen_ServiceDesc, srv)
}

func _StadteInformationen_SucheNachAnteilEinerPostleitzahl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostleitzahlenSuchbegriff)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StadteInformationenServer).SucheNachAnteilEinerPostleitzahl(m, &grpc.GenericServerStream[PostleitzahlenSuchbegriff, Postleitzahl]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachAnteilEinerPostleitzahlServer = grpc.ServerStreamingServer[Postleitzahl]

func _StadteInformationen_SucheNachAnteilEinesStadtnamen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StadtSuchbegriff)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StadteInformationenServer).SucheNachAnteilEinesStadtnamen(m, &grpc.GenericServerStream[StadtSuchbegriff, Stadtname]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachAnteilEinesStadtnamenServer = grpc.ServerStreamingServer[Stadtname]

func _StadteInformationen_SucheNachExakenStadtnamen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StadtSuchbegriff)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StadteInformationenServer).SucheNachExakenStadtnamen(m, &grpc.GenericServerStream[StadtSuchbegriff, StadtInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StadteInformationen_SucheNachExakenStadtnamenServer = grpc.ServerStreamingServer[StadtInfo]

func _StadteInformationen_SucheNachExtakerPostleitzahl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Postleitzahl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StadteInformationenServer).SucheNachExtakerPostleitzahl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StadteInformationen_SucheNachExtakerPostleitzahl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StadteInformationenServer).SucheNachExtakerPostleitzahl(ctx, req.(*Postleitzahl))
	}
	return interceptor(ctx, in, info, handler)
}

// StadteInformationen_ServiceDesc is the grpc.ServiceDesc for StadteInformationen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StadteInformationen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stadteInformationen.StadteInformationen",
	HandlerType: (*StadteInformationenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SucheNachExtakerPostleitzahl",
			Handler:    _StadteInformationen_SucheNachExtakerPostleitzahl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SucheNachAnteilEinerPostleitzahl",
			Handler:       _StadteInformationen_SucheNachAnteilEinerPostleitzahl_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SucheNachAnteilEinesStadtnamen",
			Handler:       _StadteInformationen_SucheNachAnteilEinesStadtnamen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SucheNachExakenStadtnamen",
			Handler:       _StadteInformationen_SucheNachExakenStadtnamen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "staedte.proto",
}
